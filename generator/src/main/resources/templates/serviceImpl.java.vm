package ${package.ServiceImpl};

import ${EntityPackage}.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import ${package.Entity}.${table.entityName};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import ${package.Entity}.dto.*;
import ${package.Entity}.vo.*;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import lombok.extern.slf4j.Slf4j;
import cn.hutool.core.bean.BeanUtil;
import org.springframework.stereotype.Service;
import java.util.List;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Slf4j
@Service
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${table.mapperName} ${mapperNameLower};

    /**
    * 查询列表
    * @param dto 数据对象
    * @return TableInfo
    */
    @Override
    public TableInfo<${table.entityName}ListVo> toList(${table.entityName}ListDto dto){
        Page<Object> page = PageHelper.startPage(dto.getPageNum(), dto.getPageSize());
        ${table.entityName} pojo = BeanUtil.toBean(dto,${table.entityName}.class);
        List<${table.entityName}> list = list();
        // 泛型转换
        List<${table.entityName}ListVo> voList = BeanUtil.copyToList(list,${table.entityName}ListVo.class);
        return Build.table(page,voList);
    }

    /**
    * 详情
    * @param dto 数据对象
    * @return Row
    */
    @Override
    public Row<${table.entityName}DetailVo> toDetail(${table.entityName}DetailDto dto){
        String id = dto.get${keyIdNameCapital}();
        // 查询数据
        ${table.entityName} pojo = getById(id);
        // 判空
        if(BeanUtil.isEmpty(pojo)){
        return Build.row(false,"数据不存在");
        }
        // 类型转换
        ${table.entityName}DetailVo vo = BeanUtil.toBean(pojo,${table.entityName}DetailVo.class);
        return Build.row(vo);
    }

    /**
    * 新增
    * @param dto 数据对象
    * @return AjaxResult
    */
    @Override
    @Transactional
    public AjaxResult toAdd(${table.entityName}AddDto dto){
        // 类型转换
        ${table.entityName} pojo = BeanUtil.toBean(dto,${table.entityName}.class);
        // 插入
        boolean save = save(pojo);
        return Build.ajax(save);
    }

    /**
    * 修改
    * @param dto 数据对象
    * @return AjaxResult
    */
    @Override
    @Transactional
    public AjaxResult toEdit(${table.entityName}EditDto dto){
        // 判空
        if(BeanUtil.isEmpty(getById(dto.get${keyIdNameCapital}()))){
            return Build.ajax(false,"数据不存在");
        }
        // 类型转换
        ${table.entityName} pojo = BeanUtil.toBean(dto,${table.entityName}.class);
        // 插入
        boolean update = updateById(pojo);
        return Build.ajax(update);
    }

    /**
    * 删除
    * @param dto 数据对象
    * @return AjaxResult
    */
    @Override
    @Transactional
    public AjaxResult toDelete(${table.entityName}DeleteDto dto){
        String id = dto.get${keyIdNameCapital}();
        // 判空
        if(BeanUtil.isEmpty(getById(id))){
            return Build.ajax(false,"数据不存在");
        }
        // 删除
        boolean remove = removeById(id);
        return Build.ajax(remove);
    }
}