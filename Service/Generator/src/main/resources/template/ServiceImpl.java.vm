package ${package}.${moduleName}.service.${packageName}.impl;

import cn.hutool.core.bean.BeanUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
#if( $packageName == '')
import ${package}.${moduleName}.service.I${className}Service;
import ${package}.${moduleName}.mapper.${className}Mapper;
import ${package}.${moduleName}.domain.${className};
import ${package}.${moduleName}.domain.dto.*;
import ${package}.${moduleName}.domain.vo.*;
#else
import ${package}.${moduleName}.service.${packageName}.I${className}Service;
import ${package}.${moduleName}.mapper.${packageName}.${className}Mapper;
import ${package}.${moduleName}.domain.${packageName}.${className};
import ${package}.${moduleName}.domain.${packageName}.dto.*;
import ${package}.${moduleName}.domain.${packageName}.vo.*;
#end
import com.atmb.common.core.web.domain.AjaxResult;
import com.atmb.common.core.domain.R;
import java.util.List;
import java.util.stream.Collectors;

/**
 * ${comments}ServiceImpl
 */
@Slf4j
@Service
public class ${className}ServiceImpl extends ServiceImpl<${className}Mapper, ${className}> implements I${className}Service {

    @Autowired
    private ${className}Mapper mapper;

    /**
     * 查询列表
     * @param dto 数据对象
     * @return R
     */
    @Override
    public List<${className}ListVo> toList(${className}ListDto dto) {
        ${className} pojo = BeanUtil.copyProperties(dto,${className}.class);
        List<${className}> list = list();
        // 泛型转换
        List<${className}ListVo> voList = list.stream()
                .map(v -> BeanUtil.copyProperties(v, ${className}ListVo.class))
                .collect(Collectors.toList());
        return R.ok(voList);
    }

    /**
     * 详情
     * @param dto 数据对象
     * @return AjaxResult
     */
    @Override
    public R<${className}DetailVo> toDetail(${className}DetailDto dto) {
        String id = dto.get${pk.attrName}();
        // 查询数据
        ${className} pojo = getById(id);
        // 判空
        if(BeanUtil.isEmpty(pojo)){
            return R.fail("数据不存在");
        }
        // 类型转换
        ${className}DetailVo vo = BeanUtil.copyProperties(pojo,${className}DetailVo.class);
        return R.ok(vo);
    }

    /**
     * 新增
     * @param dto 数据对象
     * @return AjaxResult
     */
    @Override
    public AjaxResult toAdd(${className}AddDto dto) {
        // 类型转换
        ${className} pojo = BeanUtil.copyProperties(dto,${className}.class);
        // 插入
        boolean save = save(pojo);
        return save ? AjaxResult.success() : AjaxResult.error("新增异常");
    }

    /**
     * 修改
     * @param dto 数据对象
     * @return AjaxResult
     */
    @Override
    public AjaxResult toEdit(${className}EditDto dto) {
        // 判空
        if(BeanUtil.isEmpty(getById(dto.get${pk.attrName}()))){
            return AjaxResult.error("数据不存在");
        }
        // 类型转换
        ${className} pojo = BeanUtil.copyProperties(dto,${className}.class);
        // 插入
        boolean update = updateById(pojo);
        return update ? AjaxResult.success() : AjaxResult.error("修改异常");
    }

    /**
     * 删除
     * @param dto 数据对象
     * @return AjaxResult
     */
    @Override
    public AjaxResult toDelete(${className}DeleteDto dto) {
        String id = dto.get${pk.attrName}();
        // 判空
        if(BeanUtil.isEmpty(getById(id))){
            return AjaxResult.error("数据不存在");
        }
        // 删除
        boolean remove = removeById(id);
        return remove ? AjaxResult.success() : AjaxResult.error("删除异常");
    }
}
